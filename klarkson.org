* Klarkson
** Sovitetaan testejä koodikantaan
[2023-04-23 Sun]

Meillä on pari testiluokkaa koodattuna, mutta ne ovat olleet kokeiluja
ilman assertioita. Siitä on ainakin vallan helppo aloittaa.

Triviaalit, funktionaaliset MiscUtilsit oli nyt ainakin triviaali
testata, mutta heti Queryparsinnan jutuissa päästään hieromaan enemmän
nystyröitä.

Helpomman testattavuuden nimissä jakakaamme ja refaktoroikaamme koodia
kanssa. Ja tietenkin TDD-tyyliin.

** TODO parseQuery tekee monta asiaa [1/1]
*** DONE parseQuery sekä parsii että luo regexiä
CLOSED: [2023-04-26 Wed 15:43]
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-04-26 Wed 15:43]
:END:
** DONE JavaMPD:n päivitys uusimpaan
CLOSED: [2023-04-26 Wed 15:43]
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-04-26 Wed 15:43]
:END:

Koska mentiin viimein uusimpaan JVM:ään niin uusimmat JavaMPD-versiot
ovat myös käytettävissäni.

** TODO Moduleiden organisointia paketteihin

Näyttää sitten paljon paremmalta.

** Albumit atomeina: statement

- Hakusana "fatboy slim" pitää tuottaa kokonaisia albumeita tuloksiksi
  myös silloin kun Fatboy Slimiä on yhden raidan verran jossain
  kokoelmatyössä.
- naiivi algoritmi:

  #+begin_src python
    # ASSUME_SENSIBLE_DIRECTORY_STRUCTURE
    all_tracks = set()
    tracks = set(query_mpd(query))
    for track in tracks:
        extra_tracks = set(query_mpd(track.album))
        all_tracks = all_tracks | extra_tracks
    # we should now have in `all_tracks` only complete albums, but maybe
    # extra that we can filter out later.
  #+end_src

*** Refaktorointi, jotta tämä idea on testattavissa

Nyt sidotaan yhteen liikaa asioita: MPD:n queryttäminen, datan
parsiminen, coroutinekin saattaa olla liikaa.

**** DONE MPD:n eristäminen pois datankeruusta
CLOSED: [2023-04-30 Sun 13:17]
:LOGBOOK:
- State "DONE"       from "STARTED"    [2023-04-30 Sun 13:17]
- State "STARTED"    from "TODO"       [2023-04-27 Thu 18:46]
:END:

Strategiamalli käyttöön. Heti kun tämä on tehty, meillä on
välittömästi huomattavasti testattavampi koodi käsissämme.

**** DONE mockkaa ja aloita testipatteristo albumienkeruulle.
CLOSED: [2023-04-30 Sun 13:17]
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-04-30 Sun 13:17]
:END:

**** DONE Tietokantariippuvuus pois albumien tuottamisesta
CLOSED: [2023-04-30 Sun 16:50]
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-04-30 Sun 16:50]
:END:

- Miten voimme tarvita tietokantaa siihen, että ulkoisesta lähteestä
  tulee auktoritaarinen (single source of truth) data
- Poistin sen checkin, jonka idea on välttää dupet. Tehdään sama asia
  toisella (paremmalla) tavalla sitten kun törmätään tähän ongelmaan
  myöhemmin.

** DONE Helppo mockattava: Songtest
CLOSED: [2023-04-26 Wed 15:39]
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-04-26 Wed 15:39]
:END:

Mockaa MPD-kutsu pois. Nyt testin ajamiseen menee 300 ms, jos se luku
saadaan pienemmäksi niin bueno.

Laitetaan =MockK= testiin.

Mockattu versio saattaa tiedä vaikka toimia? Mutta se kestää nyt
nelinkertaisesti. Tietysti riippuvuus ulkoisista prosesseista MPD:stä
on ilman muuta poistettava, joten tämä on parempi kuin alkutilanne.

MockK toimii kivasti.

** DONE MPDSong tuntee albumArtistin käsitteen
CLOSED: [2023-04-29 Sat 13:03]
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-04-29 Sat 13:03]
:END:

Ja se data tulee nätisti yhden =searchAny()=-kutsun kanssa. Eli meidän
vanha häkki joutaa nyt pois.

** TODO Integraatiotesteille oma tietokanta
** DONE Kotlin 1.8.20 ulkona
CLOSED: [2023-04-29 Sat 12:57]
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-04-29 Sat 12:57]
:END:
** TODO Tietokantaseikkailu (sekoilu)

- Sqlite on aina ollut valintani
- Java-maailmassa on h2. Monia faneja.
- Datomic on nyt ilmainen ja vapaasti käytettävissä
- Datomic osaa käyttää h2:ta luonnostaan
  - Mutta tarvitaanko tässä erillinen palvelin kuitenkin?
- Datomic osaa käyttää mitä tahansa JDBC-rajapintaa, eli myös sqlite
  on mahdollinen

*** Kotlin ja Datomic

Ei monia lähteitä tälle kombinaatiolle, mutta ei niitä tarvitakaan.
Kotlin on niin javamainen että Java-Datomic-ohjeet riittävät, tai
ainakin pitäisi.

*** Datomic: tarvitaanko erillinen palvelinprosessi?

*** Datomic: onko järkevä?

Binäärit ovat jo 460 megatavua yksinään. Ei tämä oikein ole järkevä
kokeilu työpöytäsovellukseen, jonka on määrä olla edes jollain
asteella kevyt.

*** Vaihtoehtoja: Embedded NoSQL

Tämä on se taikasana, jolla alkaa löytyä tuloksia.

- Nitrite
  - Potassium Nitrite :: Kotlin lib
- Couchbase Lite
- InfinityDB
- LevelDB
- Neo4J: embeddable?

*** Vaihtoehtoja: Embedded SQL

- sqlite
- h2
- firebird(?)

